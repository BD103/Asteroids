name: Release

on:
  workflow_dispatch:

env:
  binary: asteroids

jobs:
  release-wasm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-bindgen
        run: cargo install wasm-bindgen-cli

      - name: Build project
        run: cargo build --release --target wasm32-unknown-unknown

      - name: Prepare package
        run: |
          wasm-bindgen --no-typescript --out-name bevy_game --out-dir wasm --target web target/wasm32-unknown-unknown/release/${{ env.binary }}.wasm
          cp -r assets wasm/ || true # Try to copy, but ignore if it can't copy if source directory does not exist 

      - name: Package as a zip
        working-directory: wasm
        run: zip --recurse-paths ../${{ env.binary }}.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}.zip
          name: wasm
          retention-days: 1

  release-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends libasound2-dev libudev-dev

          # Wayland specific, disabled for now
          # sudo apt-get install --no-install-recommends libwayland-dev libxkbcommon-dev

      - name: Build project
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.binary }} linux/
          cp -r assets linux/ || true # Try to copy, but ignore if it can't copy if source directory does not exist

      - name: Package as a zip
        working-directory: linux
        run: zip --recurse-paths ../${{ env.binary }}.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}.zip
          name: linux
          retention-days: 1

  release-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Build project
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Prepare package
        shell: bash
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.binary }}.exe windows/
          cp -r assets windows/ || true

      - name: Package as a zip
        run: Compress-Archive -Path windows/* -DestinationPath ${{ env.binary }}.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}.zip
          name: windows
          retention-days: 1

  release-macos-intel:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin

      - name: Setup environment
        run: |
          echo 'CFLAGS=-fno-stack-check' >> $GITHUB_ENV
          echo 'MACOSX_DEPLOYMENT_TARGET=10.9' >> $GITHUB_ENV

      - name: Build project
        run: cargo build --release --target x86_64-apple-darwin

      - name: Prepare package
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          cp target/x86_64-apple-darwin/release/${{ env.binary }} ${{ env.binary }}.app/Contents/MacOS/
          cp -r assets ${{ env.binary }}.app/Contents/MacOS/ || true # Try to copy, but ignore if it can't copy if source directory does not exist
          hdiutil create -fs HFS+ -volname "${{ env.binary }}" -srcfolder ${{ env.binary }}.app ${{ env.binary }}-macos-intel.dmg

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}-macos-intel.dmg
          name: macos-intel
          retention-days: 1

  release-macos-apple-silicon:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Setup environment 
        run: |
          # macOS 11 was the first version to support ARM
          echo 'MACOSX_DEPLOYMENT_TARGET=11' >> $GITHUB_ENV

      - name: Build project
        run: cargo build --release --target aarch64-apple-darwin

      - name: Prepare package
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          cp target/aarch64-apple-darwin/release/${{ env.binary }} ${{ env.binary }}.app/Contents/MacOS/
          cp -r assets ${{ env.binary }}.app/Contents/MacOS/ || true # Try to copy, but ignore if it can't copy if source directory does not exist
          hdiutil create -fs HFS+ -volname "${{ env.binary }}-macos-apple-silicon" -srcfolder ${{ env.binary }}.app ${{ env.binary }}-macos-apple-silicon.dmg

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}-macos-apple-silicon.dmg
          name: macos-apple-silicon
          retention-days: 1
